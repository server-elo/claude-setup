/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Client.hpp                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tndreka <tndreka@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/09/26 15:22:34 by tndreka           #+#    #+#             */
/*   Updated: 2025/10/01 20:00:00 by tndreka          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#pragma once

#include <string>
#include <vector>
#include <ctime>

class Channel;

class Client
{
private:
    int fd;
    std::string nickname;
    std::string username;
    std::string realname;
    std::string hostname;
    std::string buffer;              // For partial messages
    bool authenticated;              // Passed PASS command
    bool registered;                 // Completed NICK + USER
    std::vector<std::string> channels; // Channel names client is in
    time_t last_activity;

public:
    Client(int fd, const std::string& hostname);
    Client(const Client& other);
    Client& operator=(const Client& other);
    ~Client();

    // Getters
    int get_fd() const;
    std::string get_nickname() const;
    std::string get_username() const;
    std::string get_realname() const;
    std::string get_hostname() const;
    std::string& get_buffer();
    bool is_authenticated() const;
    bool is_registered() const;
    const std::vector<std::string>& get_channels() const;
    time_t get_last_activity() const;

    // Setters
    void set_nickname(const std::string& nick);
    void set_username(const std::string& user);
    void set_realname(const std::string& real);
    void set_authenticated(bool auth);
    void set_registered(bool reg);
    void update_activity();

    // Channel management
    void add_channel(const std::string& channel);
    void remove_channel(const std::string& channel);
    bool is_in_channel(const std::string& channel) const;

    // IRC prefix format: nick!user@host
    std::string get_prefix() const;

    // Send message to this client
    void send_message(const std::string& message);
};
