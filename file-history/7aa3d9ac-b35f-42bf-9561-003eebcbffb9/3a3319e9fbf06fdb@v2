# GuardrailProxy 🛡️

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Docker](https://img.shields.io/badge/docker-ready-blue.svg)](https://hub.docker.com/)
[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)

**Production-grade LLM security proxy with real-time monitoring and policy management**

A drop-in reverse proxy that sits between your application and LLM providers (Anthropic/OpenAI), providing:
- 🔒 **Real-time PII redaction** - Protect sensitive data before it reaches the LLM
- 🛠️ **Tool policy enforcement** - Control which tools and arguments are allowed
- 📊 **Prometheus metrics** - Complete observability with Grafana dashboards
- 🎛️ **Admin UI** - Manage policies without restarting services
- ⚡ **Token bucket rate limiting** - Prevent abuse with configurable limits
- 🚨 **Auto-remediation PRs** - Fix policy violations detected by CI

## ✨ Features

### Core Security
- **PII Redaction**: Automatic detection and masking of emails, phone numbers, SSNs, credit cards, API keys
- **Tool Policies**: Deny-by-default with allowlist and schema validation per tool
- **Size Guards**: Configurable payload and token limits
- **Environment Safety**: Required headers prevent accidental production leaks

### Monitoring & Observability
- **Prometheus Metrics**: 20+ metrics including request rate, latency (p50/p95/p99), decisions, redactions
- **Grafana Dashboards**: Pre-built dashboards with real-time visualization
- **Structured Audit Logs**: All decisions logged with policy version for compliance

### Admin & Management
- **REST API**: 5 endpoints for policy management, audit logs, and statistics
- **React Admin UI**: Beautiful dashboard for policy editing and monitoring
- **API Key Authentication**: Secure admin access
- **Hot Reload**: Update policies without service restart

### Production Ready
- **Rate Limiting**: Token bucket algorithm (100 req/min + 20 burst, configurable)
- **Docker Compose**: 3-service stack ready in 5 minutes
- **Kubernetes/Helm**: Production deployment with health checks
- **<50ms Latency**: p95 overhead under 50ms (no LLM calls in hot path)

## Quick Start

### Prerequisites

- Python 3.11+
- Docker (optional)
- GitHub CLI (for auto-remediation PR feature)

### Quick Start with Docker Compose (Recommended)

```bash
# Clone the repository
git clone https://github.com/yourusername/guardrailproxy.git
cd guardrailproxy

# Configure environment
cp .env.example .env
# Edit .env and add your PROVIDER_API_KEY

# Start the complete stack (proxy + Prometheus + Grafana)
./setup.sh

# Verify services are running
curl http://localhost:8080/healthz

# Access services
# - GuardrailProxy: http://localhost:8080
# - Prometheus: http://localhost:9090
# - Grafana: http://localhost:3000 (admin/admin)
```

### Alternative: Local Development

```bash
# Install dependencies
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt

# Run the proxy
export PROVIDER_API_KEY=your_api_key_here
export PROVIDER=anthropic  # or openai
export ADMIN_API_KEY=$(python3 -c "import secrets; print(secrets.token_urlsafe(32))")

uvicorn app.main:app --host 0.0.0.0 --port 8080
```

### Admin UI

```bash
cd admin-ui
npm install
npm run dev

# Open http://localhost:3001
# Login with your ADMIN_API_KEY
```

## Configuration

The proxy is configured using a YAML policy file. By default, it looks for `app/policy.yaml`, but you can specify a different path using the `POLICY_PATH` environment variable.

### Sample Policy

```yaml
version: "1.0.0"
pii_patterns:
  EMAIL:    '(?i)\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b'
  PHONE:    '\b(?:\+?\d{1,3}[-.\s]?)?(?:\(?\d{3}\)?[-.\s]?)?\d{3}[-.\s]?\d{4}\b'
  SSN:      '\b\d{3}-\d{2}-\d{4}\b'
  CARD:     '\b(?:\d[ -]*?){13,16}\b'
  ACCESS_KEY: 'AKIA[0-9A-Z]{16}'
redaction:
  strategy: token
  token_format: "[REDACTED:{TYPE}]"
tools:
  default: deny
  allow:
    - name: search
      args_schema: {}
    - name: writeFile
      args_schema:
        external_write: { enum: [false] }
        path: { pattern: '^(?!\.\.).+' }
limits:
  max_kb: 64
  max_model_tokens: 4000
audit:
  log_payloads: masked
  retention_days: 30
environments:
  require_header: { name: "X-Environment", value: "staging" }
```

## API Usage

### Chat Endpoint

```bash
curl -X POST http://localhost:8080/chat \
  -H "Content-Type: application/json" \
  -H "X-Environment: staging" \
  -d '{
    "user_input": "Hello, my email is user@example.com",
    "intended_tool_calls": [
      {
        "tool": "search",
        "args": {}
      }
    ],
    "model": "claude-3-5-sonnet-20240620"
  }'
```

### Health Check

```bash
curl http://localhost:8080/healthz
```

## Auto-Remediation PRs

The auto-remediation feature automatically generates pull requests to fix policy violations detected by your Red-Team CI.

### Usage

```bash
python scripts/generate_guardrail_pr.py \
  --repo owner/repo \
  --verdict path/to/verdicts.json \
  --branch fix/guardrail-123
```

### CI Integration

Add the following to your CI workflow:

```yaml
- name: Spin up Guardrail Proxy
  run: docker build -t guardrail . && docker run -d -p 8080:8080 --name guardrail -e PROVIDER_API_KEY=${{ secrets.PROVIDER_API_KEY }} guardrail
  
- name: Re-run top repro via proxy
  run: bash scripts/repro_through_proxy.sh artifacts/top_repro.json
  
- name: Create guardrail PR
  if: failure()
  run: python scripts/generate_guardrail_pr.py --repo ${{ github.repository }} --verdict artifacts/verdicts.json --branch fix/guardrail-${{ github.run_id }}
```

## Architecture

```
Caller → Guardrail Proxy (FastAPI/Worker)
        ├─ Hot path PDP (regex/arg schema, no LLM)
        │   ├─ decision=allow/allow_with_redaction → call Provider API
        │   └─ decision=deny → 403 + rationale
        ├─ Logging: decision + policy_version + redactions[] (masked)
        └─ Async sampler → Judge (LLM) → policy_suggestions table → Auto-Remediation PRs
```

## Performance

- 95p proxy overhead ≤ 50ms
- p99 ≤ 100ms
- No LLM calls on hot path

## Security Considerations

- The proxy does not store raw user inputs or secrets
- All PII is redacted before logging
- Tool policies follow deny-by-default principle
- Environment header prevents accidental production usage
- Size limits prevent DoS attacks

## 📊 Monitoring

GuardrailProxy provides comprehensive metrics via Prometheus:

- `guardrail_requests_total` - Total requests by method, endpoint, status
- `guardrail_request_duration_seconds` - Request latency histogram (p50/p95/p99)
- `guardrail_policy_decisions_total` - Decisions by type (allow/deny/allow_with_redaction)
- `guardrail_pii_redactions_total` - PII redactions by type (EMAIL/PHONE/SSN/CARD/KEY)
- `guardrail_rate_limit_exceeded_total` - Rate limit violations
- And 15+ more metrics...

Access Grafana at `http://localhost:3000` (admin/admin) for pre-built dashboards.

## 🔧 Configuration

All configuration via environment variables:

### Required
- `PROVIDER_API_KEY` - Your Anthropic or OpenAI API key
- `PROVIDER` - `anthropic` or `openai`
- `ADMIN_API_KEY` - Admin API key for policy management

### Optional
- `RATE_LIMIT` - Requests per minute (default: 100)
- `RATE_LIMIT_PERIOD` - Time period in seconds (default: 60)
- `RATE_LIMIT_BURST` - Burst capacity (default: 20)
- `POLICY_PATH` - Path to policy.yaml (default: app/policy.yaml)
- `MAX_SECONDS` - Request timeout (default: 45)
- `JUDGE_ENABLED` - Enable shadow judge (default: false)
- `JUDGE_SAMPLE_RATE` - Judge sampling rate (default: 0.05)

See `.env.example` for complete list.

## 🚀 Deployment

### Docker Compose (Development/Staging)

```bash
docker compose up -d
```

### Kubernetes (Production)

```bash
helm install guardrail ./helm/guardrail-proxy \
  --set provider.apiKey=$PROVIDER_API_KEY \
  --set provider.name=anthropic \
  --set adminApiKey=$ADMIN_API_KEY
```

See [DEPLOYMENT_GUIDE.md](DEPLOYMENT_GUIDE.md) for detailed instructions.

## 🔒 Security

- All PII is redacted before logging
- API keys never logged
- Admin endpoints require authentication
- Rate limiting prevents abuse
- Deny-by-default tool policies
- Environment headers prevent production leaks

Report security vulnerabilities to: security@example.com

## 📈 Performance

Benchmarks on M1 Mac:
- **p50 latency**: 12ms
- **p95 latency**: 45ms
- **p99 latency**: 95ms
- **Throughput**: 500+ req/sec

No LLM calls on critical path - only regex and schema validation.

## 🤝 Contributing

We welcome contributions! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.

### Development Setup

```bash
# Clone and install
git clone https://github.com/yourusername/guardrailproxy.git
cd guardrailproxy
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt

# Run tests
pytest

# Run with hot reload
uvicorn app.main:app --reload
```

## 📝 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

Built with:
- [FastAPI](https://fastapi.tiangolo.com/) - Modern Python web framework
- [Prometheus](https://prometheus.io/) - Monitoring and metrics
- [Grafana](https://grafana.com/) - Visualization
- [React](https://react.dev/) - Admin UI

## 🔗 Links

- **Documentation**: [DEPLOYMENT_GUIDE.md](DEPLOYMENT_GUIDE.md)
- **Security Suite**: [SECURITY_SUITE.md](SECURITY_SUITE.md)
- **Quick Test Guide**: [QUICK_TEST.md](QUICK_TEST.md)

---

**Made with ❤️ for the LLM security community**