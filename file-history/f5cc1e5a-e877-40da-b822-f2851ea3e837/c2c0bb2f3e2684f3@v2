"""
Browser Mode Voice Handler (FastRTC + Gradio)
Web UI for voice interaction
"""
from fastrtc import ReplyOnPause, Stream
from loguru import logger
from .stt import SpeechToText
from .tts import TextToSpeech
from .llm import LanguageModel

class BrowserVoiceHandler:
    def __init__(self, llm_model: str = "gemma2:2b", system_prompt: str = ""):
        self.stt = SpeechToText()
        self.tts = TextToSpeech()
        self.llm = LanguageModel(model=llm_model)
        self.system_prompt = system_prompt

        logger.success("Browser voice handler ready")

    def process_audio(self, audio_data):
        """
        Process incoming audio: STT ‚Üí LLM ‚Üí TTS
        This is called by FastRTC for each audio chunk
        """
        try:
            # 1. Speech-to-Text
            transcript = self.stt.transcribe(audio_data)

            if not transcript or transcript.strip() == "":
                return

            logger.info(f"User: {transcript}")

            # 2. Get LLM response
            response = self.llm.chat(transcript, system_prompt=self.system_prompt)
            logger.info(f"Sofia: {response}")

            # 3. Text-to-Speech (streaming)
            for audio_chunk in self.tts.speak_stream(response):
                yield audio_chunk

        except Exception as e:
            logger.error(f"Error processing audio: {e}")

    def launch(self, share: bool = False):
        """
        Launch Gradio web UI

        Args:
            share: Create public shareable link
        """
        print("\n" + "=" * 60)
        print("üåê SOFIA - Browser Voice Mode")
        print("=" * 60)
        print("üöÄ Starting web interface...")
        print("üí° Click microphone button to start talking")
        print("=" * 60 + "\n")

        # Create FastRTC stream
        stream = Stream(
            ReplyOnPause(self.process_audio),
            modality="audio",
            mode="send-receive"
        )

        # Launch Gradio UI
        stream.ui.launch(share=share, server_name="0.0.0.0")

    def cleanup(self):
        """Clean up resources"""
        logger.info("Browser handler cleaned up")