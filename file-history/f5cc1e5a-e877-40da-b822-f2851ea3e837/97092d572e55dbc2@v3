"""
Text-to-Speech using Edge TTS (Microsoft, free, low latency)
German voice: Seraphina
"""
import edge_tts
import asyncio
import io
from pydub import AudioSegment
from loguru import logger

class TextToSpeech:
    def __init__(self, voice="de-DE-SeraphinaMultilingualNeural"):
        """
        Initialize Edge TTS with German voice

        German voices:
        - de-DE-SeraphinaMultilingualNeural (Female, natural)
        - de-DE-FlorianMultilingualNeural (Male)
        - de-DE-KatjaNeural (Female)
        - de-DE-ConradNeural (Male)
        """
        self.voice = voice
        logger.success(f"Edge TTS initialized (voice: {voice})")

    def speak(self, text: str) -> bytes:
        """Convert text to audio (returns WAV bytes)"""
        try:
            logger.debug(f"Generating speech: {text[:50]}...")

            # Run async Edge TTS
            audio_data = asyncio.run(self._generate_audio(text))

            return audio_data

        except Exception as e:
            logger.error(f"TTS error: {e}")
            return None

    async def _generate_audio(self, text: str) -> bytes:
        """Generate audio using Edge TTS (async)"""
        communicate = edge_tts.Communicate(text, self.voice)

        # Collect all audio chunks
        audio_chunks = []
        async for chunk in communicate.stream():
            if chunk["type"] == "audio":
                audio_chunks.append(chunk["data"])

        # Combine chunks
        audio_data = b''.join(audio_chunks)

        # Convert MP3 to WAV for PyAudio compatibility
        audio_segment = AudioSegment.from_mp3(io.BytesIO(audio_data))
        audio_segment = audio_segment.set_frame_rate(16000).set_channels(1)

        wav_io = io.BytesIO()
        audio_segment.export(wav_io, format="wav")
        wav_data = wav_io.getvalue()

        # Strip WAV header (44 bytes) for raw PCM
        return wav_data[44:]

    def speak_stream(self, text: str):
        """Stream audio generation (low latency)"""
        try:
            logger.debug(f"Streaming speech: {text[:50]}...")

            async def stream():
                communicate = edge_tts.Communicate(text, self.voice)
                async for chunk in communicate.stream():
                    if chunk["type"] == "audio":
                        yield chunk["data"]

            # Run async generator
            loop = asyncio.get_event_loop()
            async_gen = stream()

            while True:
                try:
                    chunk = loop.run_until_complete(async_gen.__anext__())
                    yield chunk
                except StopAsyncIteration:
                    break

        except Exception as e:
            logger.error(f"TTS streaming error: {e}")